name: 04 - Publish Coffee-App

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

on:
  workflow_dispatch:
  # push:
  #   paths:
  #     - 'application/**'
  # workflow_dispatch:
jobs:
  build-and-publish-product-catalog:
    runs-on: ubuntu-latest
    name: Build and publish Coffee App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
          cache: "gradle"

      - name: Build application
        working-directory: application/product-catalog
        run: ./gradlew build --stacktrace

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: Wapinho2016/product-catalog:latest

  build-and-publish-order-service:
    runs-on: ubuntu-latest
    name: Build and publish Coffee App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
          cache: "gradle"

      - name: Build application
        working-directory: application/order-service
        run: ./gradlew build --stacktrace

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: Wapinho2016/order-service:latest

  build-and-publish-user-service:
    runs-on: ubuntu-latest
    name: Build and publish Coffee App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
          cache: "gradle"

      - name: Build application
        working-directory: application/user-service
        run: ./gradlew build --stacktrace

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: Wapinho2016/user-service:latest

  deploy:
    runs-on: ubuntu-latest
    name: Deploy Coffee App
    needs:
      [
        build-and-publish-product-catalog,
        build-and-publish-order-service,
        build-and-publish-user-service,
      ]
    timeout-minutes: 15
    if: ${{ false }}
    concurrency: coffee-application-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy service stack
        working-directory: cdk
        run: npm run service:deploy

      # Each Service stack updates creates a new parameter stack that CloudFormation does not clean up for us.
      # This step deletes all "*Service-Parameters*" stacks except the latest one to keep the house clean.
      - name: Clean up old parameter stacks
        working-directory: cdk
        run: |
          aws cloudformation describe-stacks --region us-east-1 --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "prod-brewedawakening-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
          for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region us-east-1;  done
